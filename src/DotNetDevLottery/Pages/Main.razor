@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IEventService EventService

<div class="container">
    <ui-button-group class="event-company">
        @foreach (var eventInfo in EventService.EventInfos.Select((value, index) => new { value, index }))
        {
            <ui-button
                variant="@InfoButtonVariant(selectedEventCompanyIndex == eventInfo.index)"
                fill="@InfoButtonTreatment(selectedEventCompanyIndex == eventInfo.index)"
                onclick="@(() => OnClickIndexButton(eventInfo.index))">
                @eventInfo.value.name
            </ui-button>
        }
    </ui-button-group>
    <ui-dropzone
        @ref="dropzoneElement"
        class="file-dropzone">
            @if (targetFile == null)
            {
                <span>
                    파일을 끌어다가 놓아주세요!
                </span>
            }
            else
            {
                <span class="file-dropzone__filename">
                    @targetFile.Name
                </span>
            }
        <ui-button
            variant="primary"
            fill="fill"
            @onclick="OnClickFileButton">
            혹은 파일 직접 찾아보기
        </ui-button>
        <InputFile
            type="file"
            @ref="inputFileElement"
            class="file-dropzone__input"
            OnChange="@OnInputFileInput" />
    </ui-dropzone>
    @if (isSecondFilterOpened)
    {
        <div>
            <div class="form-row">
                @foreach (var groupName in groupNames.Select((value, index) => new { value, index }).ToArray())
                {
                    <ui-checkbox
                        checked="@filterGroup[groupName.index]"
                        @onchange="@(() =>OnChangeCheckbox(groupName.index))">
                        @groupName.value
                    </ui-checkbox>
                }
            </div>
            <div class="form-row">
                <ui-checkbox
                    checked="@filterCheckedIn"
                    @onchange="OnChangeFilterCheckInCheckbox">
                    체크인 한 사람만 포함
                </ui-checkbox>
            </div>
            <div class="form-row">
                <ui-button variant="accent" @onclick="OnClickGoNextPageButton">
                    이동
                </ui-button>
            </div>
        </div>
    }
    else
    {
        <div class="button-row">
            <ui-button
                variant="primary"
                fill="outline"
                @onclick="OnClickNextButton"
                disabled="@isLoading">
                @(isLoading ? "가져오는 중" : "다음")
            </ui-button>
        </div>
    }
</div>

@code {
    IJSObjectReference? elementUtils;
    InputFile? inputFileElement;
    ElementReference dropzoneElement;
    
    IBrowserFile? targetFile;
    bool isLoading = false;
    bool isSecondFilterOpened = false;
    int selectedEventCompanyIndex = 0;
    List<string> groupNames = new();
    List<bool> filterGroup = new();
    bool filterCheckedIn = true;

    string InfoButtonVariant (bool isSelected) => isSelected ? "primary" : "secondary";
    string InfoButtonTreatment (bool isSelected) => isSelected ? "fill" : "outline";

    protected override async Task OnInitializedAsync()
    {
        elementUtils = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/Pages/Main.razor.js");
        await elementUtils.InvokeVoidAsync("addDropEventToChangeInputFile", dropzoneElement);
    }
    
    private void OnClickIndexButton(int index)
    {
        selectedEventCompanyIndex = index;
        this.StateHasChanged();
    }

    private async Task OnClickFileButton()
    {
        if (elementUtils == null)
        {
            return;
        }
        await elementUtils.InvokeVoidAsync("clickElement", inputFileElement?.Element);
    }

    private void OnChangeCheckbox(int index)
    {
        filterGroup[index] = !(filterGroup[index]);
    }
    private void OnChangeFilterCheckInCheckbox()
    {
        filterCheckedIn = !filterCheckedIn;
    }

    private void OnInputFileInput(InputFileChangeEventArgs eventArgs)
    {
        targetFile = eventArgs.File;
    }

    private async Task OnClickNextButton()
    {
        if (targetFile == null)
            return;

        isLoading = true;

        try
        {
            await EventService.LoadUserInfoListAsync(selectedEventCompanyIndex, targetFile);
            isSecondFilterOpened = true;
            foreach(var userInfoGroup in EventService.UserInfos)
                {
                    Console.WriteLine(userInfoGroup.personName);
                }
                Console.WriteLine("");
            foreach(var userInfoGroup in EventService.UserInfos
                .GroupBy((userInfo) => userInfo.ticketType))
                {
                    Console.WriteLine(userInfoGroup.First().personName);
                }
            groupNames = EventService.UserInfos
                .GroupBy((userInfo) => userInfo.ticketType)
                .Select((userInfoGroup) => userInfoGroup.First().ticketType ?? string.Empty)
                .ToList();
            filterGroup = groupNames.Select((_) => true).ToList();
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnClickGoNextPageButton()
    {
        var targetGroupNames = groupNames.Where((groupName, index) => filterGroup[index]).ToList();
        var currentUsers = EventService.UserInfos;
        var selectedUsers = currentUsers.Where(info =>
        {
            if (!targetGroupNames.Contains(info.ticketType ?? string.Empty))
                return false;

            if (filterCheckedIn && !(info.isChecked ?? false))
                return false;

            return true;
        }).ToList();

        EventService.SetUserInfoList(selectedUsers);
        NavigationManager.NavigateTo("/random");
    }
}
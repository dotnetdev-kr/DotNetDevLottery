@page "/random"
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IEventService EventService
<div class="container">

<MachineAnimation
    UserInfoList="@UserInfoList.ToArray()"
    OnBeforeDrawMachine="OnBeforeDrawMachine"
    OnDrawUser="OnDrawMachine"
    OnDrawAnimationEnd="OnDrawAnimationEnd"
/>
<ui-divider vertical />
    <div class="text">
        <h2 class="text-row">@PersonCount 명 중에 당첨자에요!</h2>
        <div class="record">
            @foreach(var WinnedUserInfo in WinnedUserList) {
                <div class="record-row">
                    <span>@WinnedUserInfo.personName</span>
                    <span>@WinnedUserInfo.email</span>
                    <span>@WinnedUserInfo.phone</span>
                </div>
            }
        </div>
    </div>
</div>
<dotlottie-wc
    @ref="animationElement"
    class="@EffectClass(DrawStatus != DrawMachineStatus.Done)"
    autoplay="false"
    src="/assets/tada.lottie" />
@code {
    IJSObjectReference? lottieUtils;
    ElementReference animationElement;
    List<UserInfo> UserInfoList = new List<UserInfo>();
    List<UserInfo> WinnedUserList = new List<UserInfo>();
    DrawMachineStatus DrawStatus = DrawMachineStatus.Init;
    int PersonCount = 0;

    string EffectClass(bool isDisabled) => isDisabled ? "effect effect--disabled" : "effect";

    protected override async Task OnInitializedAsync()
    {
        UserInfoList = EventService.UserInfos.ToList();
        PersonCount = UserInfoList.Count;

        if (PersonCount == 0)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        lottieUtils = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/Pages/Random.razor.js");
    }

    public void OnBeforeDrawMachine()
    {
        DrawStatus = DrawMachineStatus.Pending;
    }
    public void OnDrawMachine(DrawUserEventArgs eventArgs)
    {
        DrawStatus = eventArgs.Status;
    }
    public async Task OnDrawAnimationEnd(DrawAnimationEndEventArgs eventArgs)
    {
        if(eventArgs.user == null) {
            NavigationManager.NavigateTo("/");
            return;
        }
        WinnedUserList.Add(eventArgs.user);
        if (lottieUtils == null) {
            return;
        }
        DrawStatus = eventArgs.Status;
        await lottieUtils.InvokeVoidAsync("startLottie", animationElement);
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (lottieUtils is not null)
        {
            await lottieUtils.DisposeAsync();
        }
    }
}

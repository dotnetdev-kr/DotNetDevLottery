@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="button-row">
        <ui-button
            treatment="outline"
            @onclick="OnClickButton"
            variant="@TriggerButtonVariant(Status == DrawMachineStatus.Pending)"
            class="@TriggerButtonClass(Status == DrawMachineStatus.Pending)">
            추첨 진행
        </ui-button>
    </div>
    <div class="machine-wrapper">
        <div class="machine"  @ref="machineElement" />
    </div>
</div>

@code {
    ElementReference machineElement;
    private DotNetObjectReference<MachineAnimation>? componentRef;
    IJSObjectReference? machineUtils;
    [Parameter, EditorRequired]
    required public UserInfo[] UserInfoList { get; set; }
    [Parameter]
    public EventCallback OnBeforeDrawMachine { get; set; }
    [Parameter]
    public EventCallback<DrawUserEventArgs> OnDrawUser { get; set; }
    [Parameter]
    public EventCallback<DrawAnimationEndEventArgs> OnDrawAnimationEnd { get; set; }

    UserInfo? SelectedUserInfo = null;
    DrawMachineStatus Status = DrawMachineStatus.Init;
    string TriggerButtonClass(bool isDisabled) => isDisabled ? "" : "success";
    string TriggerButtonVariant(bool isDisabled) => isDisabled ? "secondary" : "";
    int PersonCount = 0;
    int RemainedPersonCount = 0;
    List<int> WinnedUserList = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        PersonCount = UserInfoList.Count();
        RemainedPersonCount = PersonCount;
        if (PersonCount == 0) {
            return;
        }
        machineUtils = await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import",
            "/js/Components/MachineAnimation.razor.js"
        );
        componentRef = DotNetObjectReference.Create(this);
        await machineUtils.InvokeVoidAsync(
            "init",
            PersonCount,
            machineElement,
            componentRef,
            nameof(OnDrawMachine),
            nameof(OnDrawMachineAnimationEnd)
        );
    }

    public async Task OnClickButton()
    {
        if (machineUtils == null || Status == DrawMachineStatus.Pending) {
            return;
        }
        SelectedUserInfo = null;
        Status = DrawMachineStatus.Pending;
        await machineUtils.InvokeVoidAsync("executeDrawBall");
        await OnBeforeDrawMachine.InvokeAsync();
    }

    [JSInvokable]
    public async Task<UserInfo?> OnDrawMachine()
    {
        if (RemainedPersonCount < 1)
        {
            // TODO: 남은 인원 없음 알림
            return null;
        }
        var randomObj = new System.Random();
        var index = randomObj.Next(RemainedPersonCount);
        while (WinnedUserList.Contains(index))
        {
            index = randomObj.Next(RemainedPersonCount);
        }
        SelectedUserInfo = UserInfoList.ElementAtOrDefault(index);
        if (SelectedUserInfo == null)
        {
            return null;
        }
        WinnedUserList.Add(index);
        Status = DrawMachineStatus.Drawed;
        // TODO: 현재에는 사용하고 있지 않음. 추후 관련 기능 추가 없을 경우 삭제.
        await OnDrawUser.InvokeAsync(new DrawUserEventArgs{
            Status = Status
        });
        return SelectedUserInfo;
    }
    [JSInvokable]
    public async Task OnDrawMachineAnimationEnd()
    {
        if (SelectedUserInfo == null)
        {
            return;
        }
        Status = DrawMachineStatus.Done;
        Console.WriteLine("ASDF");
        await OnDrawAnimationEnd.InvokeAsync(new DrawAnimationEndEventArgs{
            user = SelectedUserInfo,
            Status = Status
        });
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (machineUtils is not null)
        {
            await machineUtils.InvokeVoidAsync("executeRemoveEngine");
            await machineUtils.DisposeAsync();
        }
        componentRef?.Dispose();
    }
}